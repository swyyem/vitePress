import{_ as t,c as e,o as i,aT as r}from"./chunks/framework.KoO-uqrk.js";const n="/vitePress/assets/image.CQ2RC9DL.png",s="/vitePress/assets/image-1.BFSfeHMH.png",o="/vitePress/assets/image-2.DJhVBJvi.png",f=JSON.parse('{"title":"Uniapp 使用微信原生 SDK 实战","description":"","frontmatter":{},"headers":[],"relativePath":"front/mini/thirdSDK/index.md","filePath":"front/mini/thirdSDK/index.md"}'),p={name:"front/mini/thirdSDK/index.md"};function l(d,a,c,m,_,h){return i(),e("div",null,a[0]||(a[0]=[r('<h1 id="uniapp-使用微信原生-sdk-实战" tabindex="-1">Uniapp 使用微信原生 SDK 实战 <a class="header-anchor" href="#uniapp-使用微信原生-sdk-实战" aria-label="Permalink to &quot;Uniapp 使用微信原生 SDK 实战&quot;">​</a></h1><p>Uniapp 本身是不支持引用微信原生页面的，本文以实际业务中对接微信慧眼人脸识别 SDK 作为 Demo,来介绍如何在 Uniapp 项目中集成微信三方 SDK 页面</p><h2 id="具体步骤" tabindex="-1">具体步骤 <a class="header-anchor" href="#具体步骤" aria-label="Permalink to &quot;具体步骤&quot;">​</a></h2><p>Uniapp 虽然不支持引用原生页面，但是支持在页面中引用自定义组件，我们首先将三方 SDK 注册为自定义组件</p><ol><li>在根目录创建 wxcomponets,并且将三方 SDK 放入</li></ol><p><img src="'+n+'" alt="alt text"></p><ol start="2"><li><p>在 pages.json 中注册该组件(也可以在对应页面的 style 中配置) <img src="'+s+'" alt="alt text"></p></li><li><p>创建一个 uniapp 页面用于承载该 SDK 组件,并且通过 Ref 来调取组件内通过 onLoad 执行的函数</p></li></ol><p><img src="'+o+'" alt="alt text"></p><ol start="4"><li>在 SDK 目录下搜索原跳转路径，替换为你用于承载的 uniapp 页面路径</li></ol><h2 id="参考地址" tabindex="-1">参考地址 <a class="header-anchor" href="#参考地址" aria-label="Permalink to &quot;参考地址&quot;">​</a></h2><ul><li><a href="https://uniapp.dcloud.net.cn/tutorial/miniprogram-subject?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81" target="_blank" rel="noreferrer">小程序自定义组件支持</a></li></ul>',11)]))}const S=t(p,[["render",l]]);export{f as __pageData,S as default};

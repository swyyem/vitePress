import{_ as i,c as a,o as n,aT as l}from"./chunks/framework.KoO-uqrk.js";const c=JSON.parse('{"title":"js的事件循环机制","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/event-cycle-mechanism.md","filePath":"front/interview/event-cycle-mechanism.md"}'),e={name:"front/interview/event-cycle-mechanism.md"};function t(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="js的事件循环机制" tabindex="-1">js的事件循环机制 <a class="header-anchor" href="#js的事件循环机制" aria-label="Permalink to &quot;js的事件循环机制&quot;">​</a></h1><p><strong>JavaScript 的事件循环就是一个“待办事项清单”处理机制，它永远会先处理完手头最急、最确定的事情（同步任务），然后才不断地去查看并处理那些不确定什么时候完成的事情（异步任务）。</strong></p><h2 id="_1-基本概念-单线程与异步" tabindex="-1">1. 基本概念：单线程与异步 <a class="header-anchor" href="#_1-基本概念-单线程与异步" aria-label="Permalink to &quot;1. 基本概念：单线程与异步&quot;">​</a></h2><ul><li>单线程：JavaScript 是单线程的，就像厨房只有一个厨师。他一次只能做一道菜。如果有一道菜特别耗时，后面的顾客就得一直等着，这显然不行。</li><li>异步：为了解决这个问题，厨房（浏览器/Node.js）提供了一些帮手（Web APIs / C++ APIs）。当厨师遇到需要等待的任务（比如炖汤、等外卖），他就把这个任务交给帮手去做，自己则继续做后面的菜</li></ul><h2 id="_2-核心组成部分-厨房的三个区域" tabindex="-1">2. 核心组成部分（厨房的三个区域） <a class="header-anchor" href="#_2-核心组成部分-厨房的三个区域" aria-label="Permalink to &quot;2. 核心组成部分（厨房的三个区域）&quot;">​</a></h2><p>事件循环机制依赖于三个关键部分：</p><ol><li><strong>调用栈：厨师当前的工作台。</strong> 他正在处理的菜谱步骤（执行上下文）会一层层叠放在这里。执行完一步，就把它从栈顶拿走。</li><li><strong>任务队列：</strong> 一个“待完成菜品”的队列。帮手们（如 setTimeout, AJAX, 事件监听) 完成的任务，会把他们对应的回调函数放在这个队列里排队，等待调用栈空闲时被执行。</li></ol><ul><li>注意：实际上有多个队列，优先级不同，下面会细说。</li></ul><ol start="3"><li><strong>事件循环：</strong> 这位是餐厅经理。他的工作非常简单且重复：</li></ol><ul><li>不断检查调用栈是否为空。</li><li>一旦调用栈空了，他就去任务队列里看看，有没有在排队等待的回调函数。</li><li>如果有，就把队列里的第一个回调函数拿出来，放到调用栈中去执行。</li></ul><h2 id="_3-宏任务-vs-微任务-任务的优先级" tabindex="-1">3. 宏任务 vs 微任务（任务的优先级） <a class="header-anchor" href="#_3-宏任务-vs-微任务-任务的优先级" aria-label="Permalink to &quot;3. 宏任务 vs 微任务（任务的优先级）&quot;">​</a></h2><ul><li>宏任务：可以理解为“大任务”或“新订单”。</li></ul><ol><li><strong>包含：</strong> <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate (Node.js)</code>, <code>I/O操作</code>, <code>UI渲染</code>, <code>requestAnimationFrame</code>。</li><li><strong>特点：</strong> 每次事件循环只取一个宏任务来执行。</li></ol><ul><li>微任务：可以理解为“小任务”或“临时加急单”，优先级比宏任务高。</li></ul><ol><li><strong>包含：</strong> <code>Promise.then()</code>, <code>Promise.catch()</code>, <code>Promise.finally()</code>, <code>async/await</code>（本质是Promise）, <code>process.nextTick</code> (Node.js，优先级最高), <code>MutationObserver</code>。</li><li><strong>特点：</strong> 只要调用栈一空，事件循环会清空整个微任务队列里的所有任务，然后才会去取下一个宏任务。</li></ol><h2 id="_4-完整事件循环流程-厨师的工作流" tabindex="-1">4. 完整事件循环流程（厨师的工作流） <a class="header-anchor" href="#_4-完整事件循环流程-厨师的工作流" aria-label="Permalink to &quot;4. 完整事件循环流程（厨师的工作流）&quot;">​</a></h2><ol><li><strong>执行全局脚本</strong>（同步代码）：这算是第一个宏任务。厨师开始按照第一张订单（主程序）做菜。</li><li><strong>遇到异步代码：</strong></li></ol><ul><li>如果是 <code>setTimeout</code>，厨师就把它交给“定时器帮手”，然后继续做菜。时间到了，帮手会把回调函数放到<strong>宏任务队列</strong> 。</li><li>如果是 <code>Promise.then()</code>，厨师就把它交给“Promise帮手”，当Promise状态变为fulfilled或rejected后，帮手会把回调函数放到<strong>微任务队列</strong>。</li></ul><ol start="3"><li><strong>同步代码执行完毕：</strong> 调用栈变空了。</li><li><strong>经理（事件循环）开始工作：</strong></li></ol><ul><li>经理<strong>首先</strong>去检查<strong>微任务队列</strong>。</li><li>如果微任务队列里有任务，经理会<strong>一次性、全部</strong>把它们拿出来，按顺序放到调用栈中执行。</li><li><strong>关键点：</strong> 在执行当前微任务的过程中，如果又产生了新的微任务，经理会继续清空新的微任务队列，直到微任务队列完全为空为止。这可能会导致宏任务被“饿死”。</li></ul><ol start="5"><li><strong>微任务清空后：</strong> 经理再去<strong>宏任务队列</strong>里，取出<strong>第一个</strong>宏任务（比如那个setTimeout的回调），放到调用栈中执行。</li><li><strong>重复：</strong> 执行这个宏任务（这又开启了一个新的执行上下文），回到第2步。如此循环往复。</li></ol><h2 id="题目-请问以下代码的输出顺序是什么" tabindex="-1">题目：请问以下代码的输出顺序是什么？ <a class="header-anchor" href="#题目-请问以下代码的输出顺序是什么" aria-label="Permalink to &quot;题目：请问以下代码的输出顺序是什么？&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">4</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">5</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">6</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">7</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="面试回答技巧总结" tabindex="-1">面试回答技巧总结 <a class="header-anchor" href="#面试回答技巧总结" aria-label="Permalink to &quot;面试回答技巧总结&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>1.先给一句精炼的总结：“事件循环是JS处理异步任务的机制，它保证单线程不阻塞。”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.引入比喻：使用“厨师与餐厅厨房”或“经理与待办清单”的比喻，让概念更生动。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.明确核心部件：清晰地指出“调用栈”、“任务队列”、“事件循环”各自的作用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4.重点区分宏微任务：这是考察的重点。一定要强调 “微任务的优先级高于宏任务，且会在当前宏任务结束后立即清空”。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5.结合实例：如果面试官允许，可以画一个简单的流程图，或者用上面那道例题来佐证你的说法。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,25)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};

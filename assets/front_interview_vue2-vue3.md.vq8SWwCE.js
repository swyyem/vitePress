import{_ as i,c as a,o as n,aT as l}from"./chunks/framework.KoO-uqrk.js";const g=JSON.parse('{"title":"vue2 与vue3 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/vue2-vue3.md","filePath":"front/interview/vue2-vue3.md"}'),e={name:"front/interview/vue2-vue3.md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue2-与vue3-的区别" tabindex="-1">vue2 与vue3 的区别 <a class="header-anchor" href="#vue2-与vue3-的区别" aria-label="Permalink to &quot;vue2 与vue3 的区别&quot;">​</a></h1><h2 id="一、核心区别-架构与响应式原理-最根本的区别" tabindex="-1">一、核心区别：架构与响应式原理（最根本的区别） <a class="header-anchor" href="#一、核心区别-架构与响应式原理-最根本的区别" aria-label="Permalink to &quot;一、核心区别：架构与响应式原理（最根本的区别）&quot;">​</a></h2><h3 id="_1-响应式系统的重写" tabindex="-1">1. 响应式系统的重写 <a class="header-anchor" href="#_1-响应式系统的重写" aria-label="Permalink to &quot;1. 响应式系统的重写&quot;">​</a></h3><p><strong>Vue 2：基于 <code>Object.defineProperty</code></strong></p><ol><li><p><strong>工作机制：</strong> 像是一个“物业管理员”，只能对单个已知属性进行监听。它通过递归遍历数据对象，对每一个属性使用 Object.defineProperty 来设置 getter 和 setter。</p></li><li><p><strong>先天不足：</strong></p></li></ol><ul><li><strong>无法检测属性的添加或删除：</strong> 你必须使用 Vue.set 或 Vue.delete 这些特殊API才能让新属性变成响应式的。</li><li><strong>无法监听数组索引和长度的变化：</strong> 直接通过下标修改数组元素 (arr[index] = newValue) 或修改 length 是无效的，需要用到数组的变异方法（如 push, pop, splice）或 Vue.set。</li></ul><p><strong>Vue 3：基于 <code>Proxy</code></strong></p><ol><li><strong>工作机制：</strong> 像是一个“全能拦截器”，代理整个对象。你访问、修改、添加、删除对象的任何属性，都会被这个“拦截器”捕获到。</li><li><strong>巨大优势：</strong></li></ol><ul><li><strong>全面监听：</strong> 天生支持对象和数组的增、删、改、查，包括通过索引操作数组。再也不需要 Vue.set/Vue.delete 了。</li><li><strong>性能更好：</strong> 无需递归遍历初始对象，只在真正访问到某个嵌套属性时才会对其进行响应式转换（惰性处理），大大提升了初始化性能。</li><li><strong>支持更多数据结构：</strong> 原生支持 Map, Set, WeakMap, WeakSet 等。</li></ul><p><strong>通俗比喻：</strong></p><ul><li>Vue 2 像给房子的每一扇门（属性） 单独配了一个门卫，新加一扇门你得现找门卫。</li><li>Vue 3 像给整个房子（对象） 罩上了一个魔法结界，任何进出房子的行为都被监控。</li></ul><h2 id="二、开发体验与代码组织方式的区别" tabindex="-1">二、开发体验与代码组织方式的区别 <a class="header-anchor" href="#二、开发体验与代码组织方式的区别" aria-label="Permalink to &quot;二、开发体验与代码组织方式的区别&quot;">​</a></h2><h3 id="_2-composition-api-组合式-api-vs-options-api-选项式-api" tabindex="-1">2. Composition API (组合式 API) vs Options API (选项式 API) <a class="header-anchor" href="#_2-composition-api-组合式-api-vs-options-api-选项式-api" aria-label="Permalink to &quot;2. Composition API (组合式 API) vs Options API (选项式 API)&quot;">​</a></h3><ul><li>这是对开发者影响最大的变化。</li></ul><p><strong>Vue 2 (Options API)：</strong></p><ul><li><strong>组织方式：</strong> 像填表格，你把代码按照功能类型分到不同的“格子”里（data, methods, computed, watch, 生命周期）。</li><li><strong>问题：</strong> 当一个功能复杂时，它的逻辑会被拆分到多个不同的选项中。阅读代码时，你需要上下反复滚动来理解一个完整的功能。</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- Vue 2 组件：管理用户搜索 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 数据在这里</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      searchQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      users</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [],</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      loading</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  methods</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 方法在这里</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">loading</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // ... 请求数据，最后 this.users = data</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  watch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 监听在这里</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    searchQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newVal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  mounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 生命周期在这里</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><strong>Vue 3 (Composition API)：</strong></p><ul><li><strong>组织方式：</strong> 像搭乐高，你可以把同一个功能相关的数据、方法、计算属性、生命周期等代码块组合在一起。</li><li><strong>优势：</strong><ol><li>逻辑复用极佳： 可以轻松地将一个功能的逻辑提取成一个可复用的“组合式函数” (composable)。</li><li>代码组织更灵活： 相关功能的代码紧紧挨在一起，更易于阅读和维护。</li><li>更好的 TypeScript 支持。</li></ol></li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- Vue 3 组件：同样的用户搜索功能 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> watch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --- 用户搜索功能 ---</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> searchQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> users</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([]);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> loading</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  loading</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... 请求数据，最后 users.value = data</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  loading</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 与搜索功能相关的监听和生命周期都放在一起</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">watch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">searchQuery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fetchUsers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// --- 另一个功能也可以这样组织在旁边 ---</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// const { count, doubleCount } = useCounter();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><strong>注意： Vue 3 完全支持 Options API，Composition API 是增量式的，让你多一种更强大的选择。</strong></p><h2 id="三、性能与体积的优化" tabindex="-1">三、性能与体积的优化 <a class="header-anchor" href="#三、性能与体积的优化" aria-label="Permalink to &quot;三、性能与体积的优化&quot;">​</a></h2><h3 id="_3-更小的体积" tabindex="-1">3. 更小的体积 <a class="header-anchor" href="#_3-更小的体积" aria-label="Permalink to &quot;3. 更小的体积&quot;">​</a></h3><ul><li>Vue 3 通过 Tree-shaking 优化，核心库体积更小。如果你不使用某些功能（如 v-model 的某些修饰符、过渡组件），这些代码最终不会被打包到你的生产环境中。</li></ul><h3 id="_4-更好的性能" tabindex="-1">4. 更好的性能 <a class="header-anchor" href="#_4-更好的性能" aria-label="Permalink to &quot;4. 更好的性能&quot;">​</a></h3><ul><li><strong>虚拟 DOM 重写：</strong> 优化了 diff 算法，在模板编译时进行了更多的静态分析，生成更高效的渲染函数。</li><li><strong>编译时优化：</strong> 如静态提升、PatchFlags 等，减少了运行时开销。</li></ul><h3 id="_5-片段-fragments" tabindex="-1">5. 片段 (Fragments) <a class="header-anchor" href="#_5-片段-fragments" aria-label="Permalink to &quot;5. 片段 (Fragments)&quot;">​</a></h3><ul><li><strong>Vue 2：</strong> 组件模板必须有且只有一个根元素。</li><li><strong>Vue 3：</strong> 组件模板可以包含多个根节点，无需再包裹一个无用的<code> &lt;div&gt;</code>。</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- Vue 3 中合法 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">footer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">footer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="四、其他重要区别" tabindex="-1">四、其他重要区别 <a class="header-anchor" href="#四、其他重要区别" aria-label="Permalink to &quot;四、其他重要区别&quot;">​</a></h2><h3 id="_6-生命周期钩子" tabindex="-1">6. 生命周期钩子 <a class="header-anchor" href="#_6-生命周期钩子" aria-label="Permalink to &quot;6. 生命周期钩子&quot;">​</a></h3><ul><li>大部分钩子改名，在前面加了 <code>on</code>，如 <code>mounted</code> -&gt; <code>onMounted</code>。</li><li><code>beforeDestroy</code> 和 <code>destroyed</code> 被更名为 <code>onBeforeUnmount</code> 和 <code>onUnmounted</code>，语义更准确。</li></ul><h3 id="_7-更好的-typescript-支持" tabindex="-1">7. 更好的 TypeScript 支持 <a class="header-anchor" href="#_7-更好的-typescript-支持" aria-label="Permalink to &quot;7. 更好的 TypeScript 支持&quot;">​</a></h3><ul><li>Vue 3 本身就是用 TypeScript 重写的，提供了完美的类型推断，开发体验远超 Vue 2。</li></ul><h3 id="_8-新的组件-teleport-和-suspense" tabindex="-1">8.新的组件：Teleport 和 Suspense <a class="header-anchor" href="#_8-新的组件-teleport-和-suspense" aria-label="Permalink to &quot;8.新的组件：Teleport 和 Suspense&quot;">​</a></h3><ul><li><strong>Teleport：</strong> 可以将组件的一部分模板“传送”到 DOM 中其他位置（如全局模态框）。</li><li><strong>Suspense：</strong> 提供了一种声明式的方法来等待异步组件依赖的异步数据。</li></ul><h2 id="五、面试回答策略-如何组织你的答案" tabindex="-1">五、面试回答策略（如何组织你的答案） <a class="header-anchor" href="#五、面试回答策略-如何组织你的答案" aria-label="Permalink to &quot;五、面试回答策略（如何组织你的答案）&quot;">​</a></h2><ol><li><strong>开头总起：</strong> “Vue 3 相对于 Vue 2 是一次全面的升级，主要体现在性能、代码组织和开发体验上。”</li><li><strong>分点阐述（挑最重要的说）：</strong></li></ol><ul><li><strong>第一，也是根本区别，是响应式原理的重构。</strong> Vue 2 基于 Object.defineProperty，有先天不足；Vue 3 基于 Proxy，解决了所有限制，性能也更好。</li><li><strong>第二，是全新的代码组织方式 Composition API。</strong> 它解决了 Options API 在复杂组件中逻辑关注点分散的问题，让代码更易于组织和复用，尤其适合大型项目和 TypeScript。</li><li><strong>第三，是性能和体积的优化。</strong> 通过 Tree-shaking 和虚拟 DOM 的重写，带来了更小的打包体积和更快的运行速度。</li><li><strong>第四，是一些开发体验的增强。</strong> 比如支持多根节点的模板、新的内置组件 Teleport 和 Suspense，以及更好的 TypeScript 集成。</li></ul><ol start="3"><li><strong>结尾总结：</strong> “总而言之，Vue 3 在保留 Vue 2 核心思想的同时，通过底层革新和上层 API 的完善，让它变得更高效、更灵活、更易于维护和扩展。”</li></ol>`,40)]))}const c=i(e,[["render",p]]);export{g as __pageData,c as default};

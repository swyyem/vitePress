import{_ as t,c as a,o as i,aT as l}from"./chunks/framework.KoO-uqrk.js";const h=JSON.parse('{"title":"JSONP原理","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/jsonp.md","filePath":"front/interview/jsonp.md"}'),r={name:"front/interview/jsonp.md"};function o(n,e,s,c,d,p){return i(),a("div",null,e[0]||(e[0]=[l('<h1 id="jsonp原理" tabindex="-1">JSONP原理 <a class="header-anchor" href="#jsonp原理" aria-label="Permalink to &quot;JSONP原理&quot;">​</a></h1><ul><li>JSONP的原理是利用<code>&lt;script&gt;</code>标签没有跨域限制的特性来实现跨域请求。</li></ul><h2 id="具体流程是" tabindex="-1">具体流程是： <a class="header-anchor" href="#具体流程是" aria-label="Permalink to &quot;具体流程是：&quot;">​</a></h2><ul><li>前端先定义一个全局回调函数</li><li>然后动态创建<code>&lt;script&gt;</code>标签，src指向目标API并传递回调函数名</li><li>后端接收到请求后，不是返回JSON，而是返回一段JS代码：回调函数名(数据)</li><li>浏览器加载这个script后会执行这段代码，从而调用前端的回调函数并传入数据</li><li>JSONP的优点是兼容性好，但缺点是只支持GET请求，有安全风险，现在已经被CORS方案取代了。</li><li>我理解JSONP更多是为了应付老项目中的跨域问题，新项目应该使用CORS。</li></ul><h2 id="记住核心点" tabindex="-1">记住核心点： <a class="header-anchor" href="#记住核心点" aria-label="Permalink to &quot;记住核心点：&quot;">​</a></h2><ul><li>JSONP = 利用script标签 + 后端返回JS代码 + 回调函数</li></ul>',6)]))}const u=t(r,[["render",o]]);export{h as __pageData,u as default};

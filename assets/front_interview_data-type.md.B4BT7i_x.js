import{_ as i,c as a,o as n,aT as t}from"./chunks/framework.KoO-uqrk.js";const g=JSON.parse('{"title":"javascript的数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/data-type.md","filePath":"front/interview/data-type.md"}'),l={name:"front/interview/data-type.md"};function e(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="javascript的数据类型" tabindex="-1">javascript的数据类型 <a class="header-anchor" href="#javascript的数据类型" aria-label="Permalink to &quot;javascript的数据类型&quot;">​</a></h1><p><strong>JavaScript 的数据类型分为两大类：原始类型和对象类型。原始类型是值本身不可变的“基本数据”，而对象类型是属性集合的“复杂数据”，通过引用来访问。</strong></p><h2 id="_1-两大分类-原始类型-vs-引用类型" tabindex="-1">1. 两大分类：原始类型 vs 引用类型 <a class="header-anchor" href="#_1-两大分类-原始类型-vs-引用类型" aria-label="Permalink to &quot;1. 两大分类：原始类型 vs 引用类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">特征</th><th style="text-align:center;">原始类型</th><th style="text-align:center;">引用类型</th></tr></thead><tbody><tr><td style="text-align:center;">通俗比喻</td><td style="text-align:center;">“实际的值”（就像你钱包里的现金）</td><td style="text-align:center;">“保险箱的钥匙”（钥匙可以复制，但开的都是同一个保险箱）</td></tr><tr><td style="text-align:center;">存储方式</td><td style="text-align:center;">存储在栈中</td><td style="text-align:center;">存储在堆中，栈里存储的是堆的内存地址</td></tr><tr><td style="text-align:center;">拷贝行为</td><td style="text-align:center;">值拷贝：复制一份全新的、独立的值</td><td style="text-align:center;">引用拷贝：复制的是内存地址，指向同一个对象</td></tr><tr><td style="text-align:center;">可变性</td><td style="text-align:center;">不可变：值本身无法被改变</td><td style="text-align:center;">可变：对象的属性可以被修改</td></tr></tbody></table><h2 id="_2-八种内置数据类型-es2020-标准" tabindex="-1">2. 八种内置数据类型（ES2020 标准） <a class="header-anchor" href="#_2-八种内置数据类型-es2020-标准" aria-label="Permalink to &quot;2. 八种内置数据类型（ES2020 标准）&quot;">​</a></h2><p>自从 ES6 引入 <code>Symbol</code> 和 ES2020 引入 <code>BigInt</code> 后，JavaScript 共有 8 种 内置数据类型。</p><h3 id="a-原始类型" tabindex="-1"><strong>A. 原始类型</strong> <a class="header-anchor" href="#a-原始类型" aria-label="Permalink to &quot;**A. 原始类型**&quot;">​</a></h3><ol><li><strong>undefined</strong>：</li></ol><ul><li><strong>含义：</strong> 表示“未定义”或“不存在值”。</li><li><strong>场景：</strong> 一个变量声明了但未赋值，默认值就是 <code>undefined</code>。</li><li><strong>示例：</strong> <code>let a; console.log(a); // undefined</code></li></ul><ol start="2"><li><strong>null</strong>：</li></ol><ul><li><strong>含义：</strong> 表示“空值”或“无对象”。</li><li><strong>场景：</strong> 通常作为一个有意赋值的空值，表示一个空对象指针。</li><li><strong>面试坑点：</strong> <code>typeof null</code> 返回 <code>&quot;object&quot;</code>，这是 JavaScript 的一个历史遗留 Bug。</li></ul><ol start="3"><li><strong>boolean</strong>：</li></ol><ul><li><strong>含义：</strong> 逻辑值，只有两个：<code>true</code> 和 <code>false</code>。</li><li><strong>场景：</strong> 用于条件判断。</li></ul><ol start="4"><li><strong>number</strong>：</li></ol><ul><li><strong>含义：</strong> 代表整数和浮点数。</li><li><strong>特殊值：</strong> <code>NaN</code>（不是一个数字）、<code>Infinity</code>（无穷大）。</li><li><strong>注意：</strong> JavaScript 不区分整型和浮点型，统一用 <code>number</code> 表示。</li></ul><ol start="5"><li><strong>string</strong>：</li></ol><ul><li><strong>含义：</strong> 代表文本数据，一串字符。</li><li><strong>特点：</strong> 字符串是不可变的，一旦创建，无法改变其中的字符。</li></ul><ol start="6"><li><strong>symbol (ES6+)：</strong>：</li></ol><ul><li><strong>含义：</strong> 表示唯一的、不可变的值。</li><li><strong>场景：</strong> 主要用于对象的唯一属性名，防止属性名冲突。</li></ul><ol start="7"><li><strong>bigint (ES2020+)：</strong>：</li></ol><ul><li><strong>含义：</strong> 用于表示 JavaScript 中大于 <code>Number.MAX_SAFE_INTEGER</code> 的整数。用于表示任意精度的整数</li><li><strong>场景：</strong> 解决 <code>number</code> 类型无法安全表示大于 <code>2^53 - 1</code> 的整数的问题。</li><li><strong>创建：</strong> 在整数末尾加 <code>n</code>，如 <code>123n</code>。</li></ul><h3 id="b-引用类型" tabindex="-1">B. 引用类型 <a class="header-anchor" href="#b-引用类型" aria-label="Permalink to &quot;B. 引用类型&quot;">​</a></h3><ol start="8"><li><strong>object</strong>：</li></ol><ul><li><strong>含义：</strong> 是一组键值对的集合，是其他对象的基类。</li><li><strong>子类型：</strong><ul><li><strong>Array:</strong> 数组，一种特殊的对象，键为数字索引。</li><li><strong>Function：</strong> 函数，也是一种对象，可以被调用。</li><li><strong>Date</strong>, <strong>RegExp</strong>, <strong>Map</strong>, <strong>Set</strong>, <strong>WeakMap</strong>, <strong>WeakSet</strong>, <strong>Promise</strong>, <strong>Error</strong>, <strong>Math</strong>, <strong>JSON</strong>, <strong>Proxy</strong>, <strong>Reflect</strong>, <strong>Intl</strong>, <strong>Generator</strong>, <strong>AsyncFunction</strong>, <strong>AsyncGenerator</strong>, <strong>BigInt</strong>, <strong>BigInt64Array</strong>, <strong>BigUint64Array</strong>, <strong>SharedArrayBuffer</strong>, <strong>Atomics</strong>, <strong>WebAssembly</strong> 等。</li></ul></li></ul><h2 id="考点一-值传递-vs-引用传递" tabindex="-1">考点一：值传递 vs 引用传递 <a class="header-anchor" href="#考点一-值传递-vs-引用传递" aria-label="Permalink to &quot;考点一：值传递 vs 引用传递&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 原始类型 - 值传递（复印一份文件）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // b 是 a 的一个副本</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 10, a 的值不受影响</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 引用类型 - 引用传递（共享一把钥匙）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Alice</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // obj2 和 obj1 指向同一个内存地址（同一把钥匙）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Bob</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &#39;Bob&#39;, 因为修改的是同一个对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="考点二-类型判断-typeof-与-instanceof" tabindex="-1">考点二：类型判断 typeof 与 instanceof <a class="header-anchor" href="#考点二-类型判断-typeof-与-instanceof" aria-label="Permalink to &quot;考点二：类型判断 typeof 与 instanceof&quot;">​</a></h2><ul><li><strong>typeof：</strong> 主要用于判断原始类型（除了 <code>null</code>），判断引用类型除了 <code>function</code> 外都返回 <code>&quot;object&quot;</code>。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> undefined</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;undefined&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;number&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;boolean&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Symbol</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;symbol&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;bigint&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;object&quot; (著名的Bug!)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;object&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {});</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;object&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {});</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &quot;function&quot; (特殊)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>instanceof：</strong> 主用于检查一个<code>对象</code>是否是某个构造函数的实例。<code>只能用于引用类型</code>。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> instanceof</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> instanceof</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> instanceof</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> instanceof</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // false (原始类型不行)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="更全面的判断" tabindex="-1">更全面的判断： <a class="header-anchor" href="#更全面的判断" aria-label="Permalink to &quot;更全面的判断：&quot;">​</a></h3><ul><li><strong>判断数组</strong>：<code>Array.isArray([]) // true</code></li><li><strong>判断</strong><code>null</code>：<code>variable === null</code></li></ul><h2 id="考点三-深浅拷贝" tabindex="-1">考点三：深浅拷贝 <a class="header-anchor" href="#考点三-深浅拷贝" aria-label="Permalink to &quot;考点三：深浅拷贝&quot;">​</a></h2><p>由于引用类型的特性，直接赋值会导致数据共享问题，所以需要拷贝</p><ol><li><strong>浅拷贝：</strong> 只拷贝对象的第一层属性。如果属性是引用类型，则拷贝的仍然是引用。</li></ol><ul><li><strong>方法</strong>：<code>Object.assign()</code>, 展开运算符 <code>...</code></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> shallowCopy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><strong>深拷贝：</strong> 完全拷贝所有层级，创建一个完全独立的对象。</li></ol><ul><li><strong>方法</strong>：<code>JSON.parse(JSON.stringify(obj))</code>（最简单，但不能处理函数、<code>Symbol</code>、<code>undefined</code>和循环引用），或者使用工具库如 Lodash 的 <code>_.cloneDeep</code>。</li></ul><h2 id="面试回答技巧总结" tabindex="-1">面试回答技巧总结 <a class="header-anchor" href="#面试回答技巧总结" aria-label="Permalink to &quot;面试回答技巧总结&quot;">​</a></h2><ol><li><strong>先总后分</strong>：开头先点明“分为原始类型和引用类型两大类”，然后展开。</li><li><strong>记住数量</strong>：明确说出“目前共有 8 种数据类型”，并列举出来，这显得你很关注语言标准。</li><li><strong>善用比喻</strong>：用“现金”和“钥匙”的比喻来解释值传递和引用传递，非常直观。</li><li><strong>掌握核心考点</strong>：</li></ol><ul><li>能清晰解释 <code>a = b</code> 在两种类型下的不同结果。</li><li>能说出 <code>typeof</code> 的优缺点和 <code>instanceof</code> 的用途。</li><li>知道 <code>null</code> 是 <code>typeof</code> 的一个特例。</li></ul><ol start="5"><li><strong>联系实际</strong>：如果能提到 <code>Symbol</code> 用于防止属性名冲突，<code>BigInt</code> 用于大数运算，会是非常好的加分项。</li></ol>`,44)]))}const c=i(l,[["render",e]]);export{g as __pageData,c as default};

import{_ as s,c as a,o as l,aT as n}from"./chunks/framework.KoO-uqrk.js";const c=JSON.parse('{"title":"浅析浏览器缓存","description":"","frontmatter":{},"headers":[],"relativePath":"others/maintain/cache/index.md","filePath":"others/maintain/cache/index.md"}'),e={name:"others/maintain/cache/index.md"};function t(h,i,p,r,k,o){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="浅析浏览器缓存" tabindex="-1">浅析浏览器缓存 <a class="header-anchor" href="#浅析浏览器缓存" aria-label="Permalink to &quot;浅析浏览器缓存&quot;">​</a></h1><h2 id="什么是浏览器缓存" tabindex="-1">什么是浏览器缓存？ <a class="header-anchor" href="#什么是浏览器缓存" aria-label="Permalink to &quot;什么是浏览器缓存？&quot;">​</a></h2><p>浏览器缓存是指浏览器在本地磁盘对用户访问过的网页资源进行存储的一种机制。这些资源包括HTML页面、JavaScript文件、CSS样式表、图片等静态资源。当用户再次访问相同的资源时，浏览器可以直接从本地加载，而不需要重新向服务器请求。</p><h2 id="为什么需要浏览器缓存" tabindex="-1">为什么需要浏览器缓存？ <a class="header-anchor" href="#为什么需要浏览器缓存" aria-label="Permalink to &quot;为什么需要浏览器缓存？&quot;">​</a></h2><p>浏览器缓存的重要性体现在以下几个方面：</p><ol><li><strong>提升页面加载速度</strong>：从本地读取资源比从服务器获取要快得多</li><li><strong>减少服务器负载</strong>：降低了服务器的请求压力</li><li><strong>节省网络带宽</strong>：减少了不必要的网络传输</li><li><strong>改善用户体验</strong>：更快的响应速度带来更好的用户体验</li></ol><h2 id="浏览器缓存的分类" tabindex="-1">浏览器缓存的分类 <a class="header-anchor" href="#浏览器缓存的分类" aria-label="Permalink to &quot;浏览器缓存的分类&quot;">​</a></h2><p>浏览器缓存主要分为三大类：</p><h3 id="_1-强缓存-strong-cache" tabindex="-1">1. 强缓存（Strong Cache） <a class="header-anchor" href="#_1-强缓存-strong-cache" aria-label="Permalink to &quot;1. 强缓存（Strong Cache）&quot;">​</a></h3><p>强缓存是指在缓存期间不需要请求服务器，直接使用本地缓存的一种机制。通过以下HTTP头部字段来控制：</p><ul><li><p><strong>Expires</strong>（HTTP/1.0）</p><ul><li>指定资源的过期时间（GMT格式）</li><li>受限于客户端时间，如果客户端时间不准确会有问题</li></ul></li><li><p><strong>Cache-Control</strong>（HTTP/1.1）</p><ul><li>更细粒度的缓存控制</li><li>常用指令： <ul><li><code>max-age</code>：缓存的最大有效时间（秒）</li><li><code>no-cache</code>：强制向服务器验证,跳过强缓存</li><li><code>no-store</code>：不缓存任何内容</li><li><code>private</code>：仅浏览器可以缓存</li><li><code>public</code>：所有中间节点都可以缓存</li></ul></li></ul></li></ul><h3 id="_2-协商缓存-negotiation-cache" tabindex="-1">2. 协商缓存（Negotiation Cache） <a class="header-anchor" href="#_2-协商缓存-negotiation-cache" aria-label="Permalink to &quot;2. 协商缓存（Negotiation Cache）&quot;">​</a></h3><p>当强缓存失效后，浏览器会携带缓存标识向服务器发起请求，由服务器决定是否使用缓存。主要通过以下两对HTTP头部字段实现：</p><ul><li><p><strong>Last-Modified/If-Modified-Since</strong></p><ul><li><code>Last-Modified</code>：服务器响应资源的最后修改时间</li><li><code>If-Modified-Since</code>：客户端再次请求时带上的上次响应的Last-Modified值</li></ul></li><li><p><strong>ETag/If-None-Match</strong></p><ul><li><code>ETag</code>：服务器响应资源的唯一标识</li><li><code>If-None-Match</code>：客户端再次请求时带上的上次响应的ETag值</li><li>比Last-Modified更精确，但计算ETag值会消耗服务器资源</li></ul></li></ul><h3 id="_3-启发式缓存-heuristic-caching" tabindex="-1">3. 启发式缓存（Heuristic Caching） <a class="header-anchor" href="#_3-启发式缓存-heuristic-caching" aria-label="Permalink to &quot;3. 启发式缓存（Heuristic Caching）&quot;">​</a></h3><p>当服务器响应中没有设置任何缓存控制头（如Cache-Control或Expires）时，浏览器会采用启发式缓存策略：</p><ul><li>如果响应中包含Last-Modified头，浏览器会根据资源的最后修改时间来估算缓存时间</li><li>不同浏览器有不同的启发式缓存策略： <ul><li>Firefox：会将响应时间和当前时间之差的10%作为缓存时间</li><li>Chrome：通常将资源缓存很短的时间（几秒到几分钟不等）</li><li>Safari：也有自己的启发式算法，具体策略可能随版本变化</li></ul></li><li>例如：在Firefox中，如果一个资源的Last-Modified标识它在10天前被修改，则启发式缓存可能会将其缓存1天</li></ul><p>由于不同浏览器的启发式缓存策略不同且可能随版本更新而变化，为了确保一致的缓存行为，强烈建议始终明确设置缓存控制头。</p><h2 id="缓存流程" tabindex="-1">缓存流程 <a class="header-anchor" href="#缓存流程" aria-label="Permalink to &quot;缓存流程&quot;">​</a></h2><ol><li><p><strong>强缓存流程</strong>：</p><ul><li>浏览器首次请求资源，服务器返回资源，并在响应头中设置缓存控制字段</li><li>在缓存有效期内，浏览器直接使用本地缓存，不会发送请求到服务器</li><li>状态码显示为200（from disk cache或from memory cache）</li></ul></li><li><p><strong>协商缓存流程</strong>：</p><ul><li>强缓存失效后，浏览器携带缓存标识发起请求</li><li>服务器根据缓存标识判断资源是否变化</li><li>如果资源未变化，返回304 Not Modified，浏览器使用本地缓存</li><li>如果资源已变化，返回200和新的资源内容</li></ul></li></ol><h2 id="缓存设置及最佳实践" tabindex="-1">缓存设置及最佳实践 <a class="header-anchor" href="#缓存设置及最佳实践" aria-label="Permalink to &quot;缓存设置及最佳实践&quot;">​</a></h2><h3 id="_1-服务器配置示例" tabindex="-1">1. 服务器配置示例 <a class="header-anchor" href="#_1-服务器配置示例" aria-label="Permalink to &quot;1. 服务器配置示例&quot;">​</a></h3><p><strong>Nginx配置示例</strong>：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 静态资源缓存设置</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">location</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ~*</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;"> \\.(jpg|jpeg|png|gif|ico|css|js)$ </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    expires </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 设置过期时间为7天</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    add_header </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Cache-Control </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;public, no-transform&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Node.js Express示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">express</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">static</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">public</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    maxAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">7d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 设置静态资源缓存7天</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    setHeaders</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Cache-Control</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">public, no-transform</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-最佳实践" tabindex="-1">2. 最佳实践 <a class="header-anchor" href="#_2-最佳实践" aria-label="Permalink to &quot;2. 最佳实践&quot;">​</a></h3><ol><li><p><strong>针对不同资源采用不同的缓存策略</strong></p><ul><li>HTML入口页面：禁用缓存(no-store)，确保每次都获取最新版本</li><li>CSS、JS、图片等静态资源：强缓存，设置较长过期时间，依靠入口页打包时引用资源路径变化而更新</li><li>API响应：根据数据实时性要求设置适当的缓存策略</li></ul></li><li><p><strong>使用版本号或哈希</strong></p><ul><li>为静态资源文件名添加版本号或哈希值</li><li>当资源内容更新时，文件名变化，自动破除缓存</li></ul></li><li><p><strong>合理设置缓存时间</strong></p><ul><li>频繁变动的资源设置短期缓存或不缓存</li><li>静态资源设置长期缓存</li><li>考虑用户体验和服务器负载的平衡</li></ul></li><li><p><strong>使用CDN</strong></p><ul><li>结合CDN的缓存机制</li><li>配置适当的缓存控制头</li></ul></li><li><p><strong>避免常见错误</strong></p><ul><li>不要对经常变化的资源设置长期缓存</li><li>记得为缓存设置合适的失效策略</li><li>注意移动端的缓存特性</li></ul></li></ol><p>通过合理配置浏览器缓存，可以显著提升网站性能，改善用户体验。在实际应用中，需要根据具体场景和需求，选择合适的缓存策略。</p>`,29)]))}const g=s(e,[["render",t]]);export{c as __pageData,g as default};

import{_ as i,c as a,o as e,aT as r}from"./chunks/framework.KoO-uqrk.js";const h=JSON.parse('{"title":"css 选择器的优先级排序","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/css-priority.md","filePath":"front/interview/css-priority.md"}'),s={name:"front/interview/css-priority.md"};function l(o,t,n,p,c,_){return e(),a("div",null,t[0]||(t[0]=[r('<h1 id="css-选择器的优先级排序" tabindex="-1">css 选择器的优先级排序 <a class="header-anchor" href="#css-选择器的优先级排序" aria-label="Permalink to &quot;css 选择器的优先级排序&quot;">​</a></h1><h2 id="css选择器优先级从高到低是" tabindex="-1">CSS选择器优先级从高到低是： <a class="header-anchor" href="#css选择器优先级从高到低是" aria-label="Permalink to &quot;CSS选择器优先级从高到低是：&quot;">​</a></h2><ul><li><p>!important - 最高权力</p></li><li><p>行内样式 - 权重1000</p></li><li><p>ID选择器 - 权重100</p></li><li><p>类选择器、伪类选择器、属性选择器 - 权重10</p></li><li><p>元素选择器、伪元素选择器 - 权重1</p></li><li><p>通配符和继承 - 权重0</p></li><li><p>计算时把选择器的权重相加，分数高的生效。如果分数相同，后写的样式覆盖先写的。</p></li><li><p>实际开发中我建议尽量避免使用!important和行内样式，保持选择器简洁，这样代码更好维护。</p></li></ul><h2 id="记住这个口诀" tabindex="-1">记住这个口诀： <a class="header-anchor" href="#记住这个口诀" aria-label="Permalink to &quot;记住这个口诀：&quot;">​</a></h2><ul><li>important &gt; 行内 &gt; ID &gt; 类 &gt; 元素 &gt; 通配</li></ul>',5)]))}const m=i(s,[["render",l]]);export{h as __pageData,m as default};

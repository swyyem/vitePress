import{_ as a,c as t,o as r,aT as l}from"./chunks/framework.KoO-uqrk.js";const b=JSON.parse('{"title":"重学ES6","description":"","frontmatter":{},"headers":[],"relativePath":"front/base/ES6/index.md","filePath":"front/base/ES6/index.md"}'),o={name:"front/base/ES6/index.md"};function i(n,e,s,c,h,d){return r(),t("div",null,e[0]||(e[0]=[l('<h1 id="重学es6" tabindex="-1">重学ES6 <a class="header-anchor" href="#重学es6" aria-label="Permalink to &quot;重学ES6&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>从2015年6月17日ES6由ECMA国际组织正式发布，到现在ES15(ES2024)正式发布，已经过去9年了，各位前端同学对ES6+的大部分语法已经用的相当熟练,但是部分不那么常用的，可能还是停留在听过，见过，没用过的层次，本文主要针对一些平时业务开发中不太常见的ES6+语法进行深入，带大家一起看看不一样的ES6+</p><h2 id="reflect和proxy" tabindex="-1">Reflect和Proxy <a class="header-anchor" href="#reflect和proxy" aria-label="Permalink to &quot;Reflect和Proxy&quot;">​</a></h2><h3 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h3><p>简单的说，Reflect就是官方对对象操作相关的API进行的一次重构</p><ol><li><strong>主要作用</strong></li></ol><ul><li>提供了一个统一的对象操作 API，将对象的底层操作方法都统一集中到了 Reflect 对象上</li><li>让对象操作更加规范化，某些明显属于对象内部的方法放到 Reflect 上更合理</li><li>和Proxy 的操作方法一一对应，使得 Proxy代理对象后，可以方便地调用对应的 Reflect 方法完成原本的默认行为</li></ul><ol start="2"><li><strong>对比Object类</strong></li></ol><ul><li>修改属性值: obj.name = &#39;zs&#39;; Reflect.set(obj,&#39;name&#39;,&#39;zs&#39;);</li><li>判断属性是否存在: &#39;name&#39; in obj; Reflect.has(obj,&#39;name&#39;);</li><li>删除属性: delete zs.name ; Reflect.deleteProperty(obj,&#39;name&#39;)</li><li>获取对应属性值：const name = obj.name; const name = Reflect.get(obj,&#39;name&#39;); ... 其它相关函数均可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">MDN文档</a></li></ul><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><h2 id="generator和literator" tabindex="-1">Generator和literator <a class="header-anchor" href="#generator和literator" aria-label="Permalink to &quot;Generator和literator&quot;">​</a></h2><h2 id="set和map" tabindex="-1">Set和Map <a class="header-anchor" href="#set和map" aria-label="Permalink to &quot;Set和Map&quot;">​</a></h2>',13)]))}const m=a(o,[["render",i]]);export{b as __pageData,m as default};

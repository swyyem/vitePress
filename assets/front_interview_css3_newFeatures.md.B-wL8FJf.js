import{_ as a,c as t,o,aT as d}from"./chunks/framework.KoO-uqrk.js";const S=JSON.parse('{"title":"CSS3 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/css3/newFeatures.md","filePath":"front/interview/css3/newFeatures.md"}'),r={name:"front/interview/css3/newFeatures.md"};function i(l,e,n,c,s,h){return o(),t("div",null,e[0]||(e[0]=[d('<h1 id="css3-新特性" tabindex="-1">CSS3 新特性 <a class="header-anchor" href="#css3-新特性" aria-label="Permalink to &quot;CSS3 新特性&quot;">​</a></h1><p>CSS3带来的是一整套‘现代化’的Web样式解决方案。它不仅在视觉效果上（圆角、阴影、渐变）让页面更精美，更重要的是在布局（Flexbox）和交互（过渡、动画）上带来了革命性的变化，同时还提供了媒体查询这个实现响应式设计的核心工具。总的来说，CSS3让Web界面开发变得更灵活、更高效、也更富表现力。</p><h2 id="选择器-更精准地-选中-你想打扮的元素" tabindex="-1">选择器：更精准地“选中”你想打扮的元素 <a class="header-anchor" href="#选择器-更精准地-选中-你想打扮的元素" aria-label="Permalink to &quot;选择器：更精准地“选中”你想打扮的元素&quot;">​</a></h2><ul><li>以前：以前我们主要用<code>ID（#）</code>、<code>类（.）</code>、<code>标签（div）</code>来选元素</li><li>现在：CSS3的选择器更强大了，比如<code>nth-child</code>可以轻松实现表格的隔行换色（斑马线），<code>not()</code>可以排除特定元素，让我们能更精确地控制样式，不用再给元素加很多多余的类名了。</li></ul><h2 id="圆角、阴影与渐变-告别方方正正的-盒子" tabindex="-1">圆角、阴影与渐变：告别方方正正的“盒子” <a class="header-anchor" href="#圆角、阴影与渐变-告别方方正正的-盒子" aria-label="Permalink to &quot;圆角、阴影与渐变：告别方方正正的“盒子”&quot;">​</a></h2><ul><li>CSS3的圆角、阴影和渐变，让我们不切图就能实现很多精美的视觉效果。比如用<code>border-radius</code>做圆形头像，用<code>box-shadow</code>做卡片悬浮效果，用<code>渐变gradient</code>做漂亮的按钮背景，极大地减少了图片请求，提升了性能。</li></ul><h2 id="过渡与动画-让元素-动起来" tabindex="-1">过渡与动画：让元素“动起来” <a class="header-anchor" href="#过渡与动画-让元素-动起来" aria-label="Permalink to &quot;过渡与动画：让元素“动起来”&quot;">​</a></h2><ul><li>以前：以前做动画基本靠JavaScript，现在CSS3自己就能搞定。</li><li>现在：CSS3的transition和animation让交互动画变得非常简单。transition适合做简单的状态变化动画，比如悬停效果；而animation配合@keyframes可以定义复杂的动画序列，比如加载动画、图标旋转，性能通常比JS动画更好。</li></ul><h2 id="弹性布局-革命性的布局方式" tabindex="-1">弹性布局：革命性的布局方式 <a class="header-anchor" href="#弹性布局-革命性的布局方式" aria-label="Permalink to &quot;弹性布局：革命性的布局方式&quot;">​</a></h2><ul><li>Flex布局是为了解决传统布局的痛点（比如垂直居中困难、浮动清除等）而生的。它通过<code>justify-content</code>和<code>align-items</code>等属性，可以非常轻松地实现元素的水平垂直居中、均分空间、按比例分配等复杂布局，简直是前端开发的‘神器’。</li></ul><h2 id="响应式设计核心-媒体查询" tabindex="-1">响应式设计核心：媒体查询 <a class="header-anchor" href="#响应式设计核心-媒体查询" aria-label="Permalink to &quot;响应式设计核心：媒体查询&quot;">​</a></h2><ul><li>媒体查询是响应式Web设计的核心技术。通过<code>@media</code>规则，我们可以为不同宽度的设备编写不同的CSS，从而实现一套代码适配手机、平板、PC等多端，大大提升了开发效率和用户体验。</li></ul><h2 id="其他实用特性" tabindex="-1">其他实用特性 <a class="header-anchor" href="#其他实用特性" aria-label="Permalink to &quot;其他实用特性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>background</code></td><td>可以设置多个背景图。</td></tr><tr><td><code>文字效果</code></td><td>@font-face：引入自定义字体，不再局限于“网页安全字体”</td></tr><tr><td><code>transform 变换</code></td><td>变换 transform：对元素进行旋转、缩放、倾斜、移动。</td></tr></tbody></table>',14)]))}const b=a(r,[["render",i]]);export{S as __pageData,b as default};

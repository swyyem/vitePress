import{_ as i,c as a,o as n,aT as l}from"./chunks/framework.KoO-uqrk.js";const y=JSON.parse('{"title":"项目初始化页面闪动问题","description":"","frontmatter":{},"headers":[],"relativePath":"front/interview/page-flashing.md","filePath":"front/interview/page-flashing.md"}'),t={name:"front/interview/page-flashing.md"};function p(h,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="项目初始化页面闪动问题" tabindex="-1">项目初始化页面闪动问题 <a class="header-anchor" href="#项目初始化页面闪动问题" aria-label="Permalink to &quot;项目初始化页面闪动问题&quot;">​</a></h1><h2 id="一、为什么会发生闪动-根本原因" tabindex="-1">一、为什么会发生闪动？（根本原因） <a class="header-anchor" href="#一、为什么会发生闪动-根本原因" aria-label="Permalink to &quot;一、为什么会发生闪动？（根本原因）&quot;">​</a></h2><p><strong>核心原因：在 JavaScript 执行并渲染出最终页面之前，浏览器已经将初始的、未经处理的 HTML 内容绘制出来了。</strong></p><ul><li>这个过程可以分解为：</li></ul><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>1.服务器返回HTML： 浏览器收到一个基本的HTML文件。</span></span>
<span class="line"><span>2.首次绘制： 浏览器迫不及待地先把这个&quot;素颜&quot;的HTML渲染出来给用户看。</span></span>
<span class="line"><span>3.加载和执行JS/CSS： 浏览器开始加载并执行你的框架JS（如Vue/React）、CSS文件。</span></span>
<span class="line"><span>4.框架接管： Vue/React 开始工作，挂载组件、绑定事件、请求数据、更新DOM。</span></span>
<span class="line"><span>5.最终渲染： 页面变成了你期望的样子。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>问题就出在第2步和第5步之间！ 用户看到了这个&quot;中间态&quot;。</li></ul><h2 id="二、如何解决-从易到难-从通用到专用" tabindex="-1">二、如何解决？（从易到难，从通用到专用） <a class="header-anchor" href="#二、如何解决-从易到难-从通用到专用" aria-label="Permalink to &quot;二、如何解决？（从易到难，从通用到专用）&quot;">​</a></h2><h3 id="方案一-使用-css-隐藏初始内容-最基础通用" tabindex="-1">方案一：使用 CSS 隐藏初始内容（最基础通用） <a class="header-anchor" href="#方案一-使用-css-隐藏初始内容-最基础通用" aria-label="Permalink to &quot;方案一：使用 CSS 隐藏初始内容（最基础通用）&quot;">​</a></h3><ul><li>思路： 在样式加载前就隐藏body，等框架准备好之后再显示。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;!</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DOCTYPE</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      /* 在CSS文件的最开头就定义 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">v-cloak</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data-vue-cloak</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> none</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> !important</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      /* 或者更直接地隐藏整个应用根节点 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      #</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">not</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ready</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        visibility</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> hidden</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stylesheet</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app.css</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> v-cloak</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      &lt;!-- 你的Vue应用内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      {{ message }}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      &lt;!-- 在Vue挂载前，这里会显示原始双花括号 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">      const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Vue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({...}).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$mount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 应用挂载完成后，移除隐藏属性</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">classList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ready</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><ul><li><code>v-cloak</code> <strong>(Vue专用)：</strong> Vue在编译完成后会自动移除元素上的 <code>v-cloak</code> 属性，这样CSS就不再生效，元素就显示出来了。</li><li>手动添加<code>.ready</code>类： 思路类似，等应用初始化完毕后再显示。</li></ul><h3 id="方案二-提供骨架屏-高级且用户体验最佳" tabindex="-1">方案二：提供骨架屏 - 高级且用户体验最佳 <a class="header-anchor" href="#方案二-提供骨架屏-高级且用户体验最佳" aria-label="Permalink to &quot;方案二：提供骨架屏 - 高级且用户体验最佳&quot;">​</a></h3><ul><li>思路： 与其显示原始HTML，不如显示一个和最终页面结构相似的&quot;骨架&quot;占位图。这不仅是技术优化，更是用户体验设计。</li></ul><p><strong>实现方式：</strong></p><ul><li>1.手写骨架屏HTML/CSS： 在 #app 里直接写一个用CSS模拟的灰色块状结构。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">skeleton</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">skeleton-header</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">skeleton-content</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">skeleton-content</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在Vue/React挂载后，这个骨架屏会被替换成真实的组件。</p><ul><li>2.自动化骨架屏插件： 使用如 vue-skeleton-webpack-plugin 等插件，可以根据你的路由自动生成骨架屏。</li></ul><p><strong>面试点睛： 提到骨架屏会非常加分，这表明你不仅关注技术，更关注用户体验。</strong></p><h3 id="方案三-服务端渲染-从根本上解决问题" tabindex="-1">方案三：服务端渲染 - 从根本上解决问题 <a class="header-anchor" href="#方案三-服务端渲染-从根本上解决问题" aria-label="Permalink to &quot;方案三：服务端渲染 - 从根本上解决问题&quot;">​</a></h3><p><strong>思路：</strong> 为什么会有闪动？因为初始HTML是空的。那就在<strong>服务器上</strong> 直接把页面渲染好，返回给浏览器的就是一个&quot;完整&quot;的页面。</p><ul><li>Vue: Nuxt.js</li><li>React: Next.js</li></ul><p><strong>SSR工作流程：</strong></p><ol><li>用户请求页面。</li><li>服务器运行Vue/React代码，生成包含真实数据的完整HTML。</li><li>将这个完整的HTML发送给浏览器，浏览器立刻就能展示出有内容的页面。</li><li>然后浏览器再加载JS，进行&quot;激活&quot;，使页面变得可交互。</li></ol><p><strong>优点：</strong></p><ul><li>彻底消除闪动，因为用户第一次看到的就是最终内容。</li><li>对SEO友好。</li></ul><p><strong>缺点</strong></p><ul><li>服务器压力大，架构复杂。</li></ul><h3 id="方案四-优化打包和加载策略-辅助手段" tabindex="-1">方案四：优化打包和加载策略（辅助手段） <a class="header-anchor" href="#方案四-优化打包和加载策略-辅助手段" aria-label="Permalink to &quot;方案四：优化打包和加载策略（辅助手段）&quot;">​</a></h3><ul><li><strong>将关键CSS内联：</strong> 把首屏渲染所需的CSS直接写在 <code>&lt;style&gt;</code> 标签里，避免因等待CSS文件加载而导致的闪动。</li><li><strong>使用代码分割和懒加载：</strong> 只加载当前页面必需的代码，加快首屏加载速度，减少闪动时间。</li></ul><h2 id="四、面试回答策略-总结与升华" tabindex="-1">四、面试回答策略（总结与升华） <a class="header-anchor" href="#四、面试回答策略-总结与升华" aria-label="Permalink to &quot;四、面试回答策略（总结与升华）&quot;">​</a></h2><ol><li><p><strong>定性问题：</strong> &quot;页面闪动通常指的是在单页应用初始化时，用户会短暂地看到未经JavaScript处理的原始模板，比如 <code>{/{ message }/}</code> 这种双花括号，然后才变成正常页面。这是一个很影响用户体验的问题。&quot;</p></li><li><p><strong>解释原因：</strong> &quot;它的根本原因是浏览器渲染时序问题。浏览器会先渲染接收到的初始HTML，然后才去下载、执行JavaScript框架代码，最后框架才接管DOM并渲染出最终页面。用户看到的就是这个&#39;初始态&#39;到&#39;最终态&#39;的跳跃。&quot;</p></li><li><p><strong>给出解决方案（由浅入深）：</strong></p></li></ol><ul><li><strong>基础方案：</strong> &quot;最常用和简单的方法是使用CSS的 v-cloak 指令（Vue中）或类似原理，在应用初始化前先把内容隐藏起来。&quot;</li><li><strong>体验优化方案：</strong> &quot;更进一步，我们可以使用骨架屏。它提供一个页面结构的灰色占位图，让用户感知到内容正在加载，体验比单纯的隐藏要好很多。&quot;</li><li><strong>终极方案：</strong> &quot;从架构层面解决，可以采用服务端渲染，比如Vue的Nuxt或React的Next。这样服务器直接返回渲染好的HTML，从根本上避免了闪动，同时还对SEO有好处。&quot;</li><li><strong>辅助优化：</strong> &quot;此外，配合一些工程化优化，比如内联关键CSS、代码分割，也能有效减少闪动的时间窗口。&quot;</li></ul><ol start="4"><li><strong>结尾升华：</strong> &quot;在实际项目中，我们通常会根据项目体量和需求组合使用这些方案。比如，一个内容展示型网站可能会用SSR，而一个后台管理系统用 v-cloak 加骨架屏就足够了。核心目标都是为了给用户提供一个流畅、无感知的加载体验。&quot;</li></ol>`,34)]))}const o=i(t,[["render",p]]);export{y as __pageData,o as default};

import{_ as i,c as a,o as n,aT as l}from"./chunks/framework.KoO-uqrk.js";const c=JSON.parse('{"title":"Docker入门与实践","description":"","frontmatter":{},"headers":[],"relativePath":"others/maintain/docker/index.md","filePath":"others/maintain/docker/index.md"}'),e={name:"others/maintain/docker/index.md"};function p(r,s,t,h,k,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="docker入门与实践" tabindex="-1">Docker入门与实践 <a class="header-anchor" href="#docker入门与实践" aria-label="Permalink to &quot;Docker入门与实践&quot;">​</a></h1><h2 id="什么是docker" tabindex="-1">什么是Docker？ <a class="header-anchor" href="#什么是docker" aria-label="Permalink to &quot;什么是Docker？&quot;">​</a></h2><p>Docker是一个开源的容器化平台，它可以让开发者将应用程序和其依赖打包到一个可移植的容器中，然后在任何地方运行。Docker容器包含了运行应用程序所需的一切：代码、运行时环境、系统工具、系统库和设置。</p><h2 id="docker的主要用途" tabindex="-1">Docker的主要用途 <a class="header-anchor" href="#docker的主要用途" aria-label="Permalink to &quot;Docker的主要用途&quot;">​</a></h2><ol><li><p><strong>应用程序部署</strong></p><ul><li>快速部署应用及其依赖</li><li>确保开发、测试和生产环境的一致性</li><li>简化持续集成和持续部署(CI/CD)流程</li></ul></li><li><p><strong>环境隔离</strong></p><ul><li>不同应用之间相互隔离</li><li>避免系统依赖冲突</li><li>资源的有效隔离和限制</li></ul></li><li><p><strong>微服务架构</strong></p><ul><li>支持微服务的独立部署和扩展</li><li>便于服务的版本控制和更新</li><li>方便服务之间的集成和通信</li></ul></li></ol><h2 id="docker的优势" tabindex="-1">Docker的优势 <a class="header-anchor" href="#docker的优势" aria-label="Permalink to &quot;Docker的优势&quot;">​</a></h2><ol><li><p><strong>一致的运行环境</strong></p><ul><li>消除&quot;在我电脑上能运行&quot;的问题</li><li>保证开发和生产环境的一致性</li><li>简化团队协作</li></ul></li><li><p><strong>快速部署</strong></p><ul><li>容器启动速度快（秒级）</li><li>支持快速扩展和缩减</li><li>方便的版本控制和回滚机制</li></ul></li><li><p><strong>资源高效利用</strong></p><ul><li>比传统虚拟机更轻量级</li><li>共享主机操作系统内核</li><li>更高的资源利用率</li></ul></li><li><p><strong>易于维护</strong></p><ul><li>标准化的应用打包方式</li><li>简化应用程序的管理和维护</li><li>方便的日志管理和监控</li></ul></li></ol><h2 id="docker的核心概念" tabindex="-1">Docker的核心概念 <a class="header-anchor" href="#docker的核心概念" aria-label="Permalink to &quot;Docker的核心概念&quot;">​</a></h2><h3 id="_1-dockerfile" tabindex="-1">1. Dockerfile <a class="header-anchor" href="#_1-dockerfile" aria-label="Permalink to &quot;1. Dockerfile&quot;">​</a></h3><p>Dockerfile是一个文本文件，包含了一系列指令和参数，用于自动化构建Docker镜像。它定义了镜像的构建过程，包括：</p><ul><li>基础镜像的选择（FROM）</li><li>环境变量的设置（ENV）</li><li>依赖包的安装（RUN）</li><li>文件的复制（COPY/ADD）</li><li>容器启动时执行的命令（CMD/ENTRYPOINT）</li><li>端口映射（EXPOSE）等</li></ul><h3 id="_2-docker镜像-image" tabindex="-1">2. Docker镜像（Image） <a class="header-anchor" href="#_2-docker镜像-image" aria-label="Permalink to &quot;2. Docker镜像（Image）&quot;">​</a></h3><p>Docker镜像是一个只读的模板，包含：</p><ul><li>运行应用所需的完整环境</li><li>应用程序的代码和依赖</li><li>配置文件和运行时</li><li>系统工具和函数库</li></ul><p>特点：</p><ul><li>分层结构，每一层代表一个Dockerfile指令</li><li>可以基于基础镜像构建</li><li>支持版本控制和标签管理</li><li>可以在Docker Hub上共享和下载</li></ul><h3 id="_3-docker容器-container" tabindex="-1">3. Docker容器（Container） <a class="header-anchor" href="#_3-docker容器-container" aria-label="Permalink to &quot;3. Docker容器（Container）&quot;">​</a></h3><p>容器是镜像的运行实例，具有以下特性：</p><ul><li>提供独立的运行环境和资源空间</li><li>可以启动、停止、删除和暂停</li><li>支持数据持久化（通过数据卷）</li><li>可以与其他容器和外部网络通信</li></ul><h3 id="_4-docker-registry-镜像仓库" tabindex="-1">4. Docker Registry（镜像仓库） <a class="header-anchor" href="#_4-docker-registry-镜像仓库" aria-label="Permalink to &quot;4. Docker Registry（镜像仓库）&quot;">​</a></h3><p>用于存储和分发Docker镜像的服务，分为：</p><ul><li>公共仓库（如Docker Hub）</li><li>私有仓库（企业内部使用）</li></ul><h3 id="_5-概念之间的关系" tabindex="-1">5. 概念之间的关系 <a class="header-anchor" href="#_5-概念之间的关系" aria-label="Permalink to &quot;5. 概念之间的关系&quot;">​</a></h3><ol><li><p><strong>Dockerfile → Image → Container</strong></p><ul><li>Dockerfile定义了如何构建镜像</li><li>镜像是容器的模板</li><li>容器是镜像的运行实例</li></ul></li><li><p><strong>数据持久化</strong></p><ul><li>容器是临时的，但可以通过数据卷（Volume）持久化数据</li><li>多个容器可以共享同一个数据卷</li></ul></li><li><p><strong>网络通信</strong></p><ul><li>容器可以通过Docker网络互相通信</li><li>支持端口映射到宿主机</li><li>可以创建自定义网络隔离容器</li></ul></li></ol><h2 id="实战案例-vue2项目部署到docker" tabindex="-1">实战案例：Vue2项目部署到Docker <a class="header-anchor" href="#实战案例-vue2项目部署到docker" aria-label="Permalink to &quot;实战案例：Vue2项目部署到Docker&quot;">​</a></h2><p>下面我们将通过一个实际案例，演示如何将Vue2项目使用Docker和Nginx进行部署。</p><h3 id="_1-准备工作" tabindex="-1">1. 准备工作 <a class="header-anchor" href="#_1-准备工作" aria-label="Permalink to &quot;1. 准备工作&quot;">​</a></h3><p>首先，确保你的Vue2项目已经开发完成，并且能够正常构建。项目结构可能如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>my-vue-app/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>├── public/</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── vue.config.js</span></span>
<span class="line"><span>└── node_modules/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-创建nginx配置文件" tabindex="-1">2. 创建Nginx配置文件 <a class="header-anchor" href="#_2-创建nginx配置文件" aria-label="Permalink to &quot;2. 创建Nginx配置文件&quot;">​</a></h3><p>在项目根目录创建 <code>nginx.conf</code>：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">server</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    listen </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">      80</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    server_name </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> localhost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> / </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        root </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  /usr/share/nginx/html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        index </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index.html index.htm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try_files </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/ /index.html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    error_page </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  500</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 502</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 503</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 504</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  /50x.html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    location</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;"> /50x.html </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        root </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  /usr/share/nginx/html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_3-创建dockerfile" tabindex="-1">3. 创建Dockerfile <a class="header-anchor" href="#_3-创建dockerfile" aria-label="Permalink to &quot;3. 创建Dockerfile&quot;">​</a></h3><p>在项目根目录创建 <code>Dockerfile</code>：</p><div class="language-dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建阶段</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> node:14 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> build-stage</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /app</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . .</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 生产阶段</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> nginx:stable-alpine </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> production-stage</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> --from=build-stage /app/dist /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> nginx.conf /etc/nginx/conf.d/default.conf</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 80</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;nginx&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;-g&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;daemon off;&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-构建和运行docker镜像" tabindex="-1">4. 构建和运行Docker镜像 <a class="header-anchor" href="#_4-构建和运行docker镜像" aria-label="Permalink to &quot;4. 构建和运行Docker镜像&quot;">​</a></h3><p>在项目根目录下执行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建Docker镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-vue-app</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 运行容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8080:80</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-vue-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5-验证部署" tabindex="-1">5. 验证部署 <a class="header-anchor" href="#_5-验证部署" aria-label="Permalink to &quot;5. 验证部署&quot;">​</a></h3><p>现在可以通过访问 <code>http://localhost:8080</code> 来查看你的Vue应用了。</p><h2 id="常见问题和注意事项" tabindex="-1">常见问题和注意事项 <a class="header-anchor" href="#常见问题和注意事项" aria-label="Permalink to &quot;常见问题和注意事项&quot;">​</a></h2><ol><li><p><strong>构建优化</strong></p><ul><li>使用.dockerignore排除不必要的文件</li><li>合理使用多阶段构建减小镜像大小</li><li>选择合适的基础镜像</li></ul></li><li><p><strong>安全考虑</strong></p><ul><li>不要在容器中运行root用户</li><li>定期更新基础镜像</li><li>使用安全扫描工具检查漏洞</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>合理配置Nginx参数</li><li>优化静态资源缓存</li><li>监控容器资源使用情况</li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Docker极大地简化了应用程序的部署和维护过程。通过容器化技术，我们可以确保应用程序在不同环境中的一致性，提高开发效率，并且更容易进行扩展和维护。上述Vue2项目的部署案例展示了Docker在实际项目中的应用，希望这个教程能帮助你更好地理解和使用Docker。</p>`,44)]))}const u=i(e,[["render",p]]);export{c as __pageData,u as default};
